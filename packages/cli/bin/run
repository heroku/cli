#!/usr/bin/env node

const {Config} = require('@oclif/core')
const root = require.resolve('../package.json')
const config = new Config({root})

process.env.HEROKU_UPDATE_INSTRUCTIONS = process.env.HEROKU_UPDATE_INSTRUCTIONS || 'update with: "npm update -g heroku"'

const now = new Date()
const cliStartTime = now.getTime()
const globalTelemetry = require('../lib/global_telemetry')
const yargs = require('yargs-parser')(process.argv.slice(2))

process.once('beforeExit', async code => {
  // capture as successful exit
  if (global.cliTelemetry.isVersionOrHelp) {
    const cmdStartTime = global.cliTelemetry.commandRunDuration
    global.cliTelemetry.commandRunDuration = globalTelemetry.computeDuration(cmdStartTime)
  }

  global.cliTelemetry.exitCode = code
  global.cliTelemetry.cliRunDuration = globalTelemetry.computeDuration(cliStartTime)
  const telemetryData = global.cliTelemetry
  await globalTelemetry.sendTelemetry(telemetryData)
})

process.on('SIGINT', async () => {
  // capture as unsuccessful exit
  const error = new Error('Received SIGINT')
  error.cliRunDuration = globalTelemetry.computeDuration(cliStartTime)
  await globalTelemetry.sendTelemetry(error)
  process.exit(1)
})

process.on('SIGTERM', async () => {
  // capture as unsuccessful exit
  const error = new Error('Received SIGTERM')
  error.cliRunDuration = globalTelemetry.computeDuration(cliStartTime)
  await globalTelemetry.sendTelemetry(error)
  process.exit(1)
})

globalTelemetry.initializeInstrumentation()

const oclif = require('@oclif/core')
const oclifFlush = require('@oclif/core/flush')
const oclifError = require('@oclif/core/handle')
const {promptUser} = require('./heroku-prompts')
const {herokuRepl} = require('./heroku-repl')

const main = async () => {
  try {
    await config.load()
    const {_: [commandName, ...args], ...flags} = yargs
    if (flags.repl && args.length === 0 && Object.keys(flags).length === 1) {
      return herokuRepl(config)
    }

    if (typeof flags.prompt === 'boolean') {
      delete flags.prompt
      await promptUser(config, commandName, args, flags)
      await oclif.run([commandName, ...args], config)
    } else {
      await oclif.run(undefined, config)
    }

    await oclifFlush()
  } catch (error) {
    // capture any errors raised by oclif
    const cliError = error
    cliError.cliRunDuration = globalTelemetry.computeDuration(cliStartTime)
    await globalTelemetry.sendTelemetry(cliError)

    oclifError(error)
  }
}

main()
