#!/usr/bin/env bash

# outputs a .deb file to dist/apt

set +x

export OS=linux

source ./scripts/_init

set -x

function build () {
  __workspace="$TMP_DIR/apt/$VERSIONED_DEB_BASE.apt"
  rm -rf "$__workspace"

  # prep workspace
  mkdir -p "$__workspace/DEBIAN"
  mkdir -p "$__workspace/usr/bin"
  mkdir -p "$__workspace/usr/lib"
  mkdir -p "$DIST_APT_DIR"

  # setup base
  tar xzf "$TGZ_PATH"
  mv "$VERSIONED_BASE" "$__workspace/usr/lib/heroku"

  # add bin loader scripts
  cat << EOF > "$__workspace/usr/lib/heroku/bin/heroku"
#!/usr/bin/env bash
set -e
get_script_dir () {
  SOURCE="\${BASH_SOURCE[0]}"
  # While \$SOURCE is a symlink, resolve it
  while [ -h "\$SOURCE" ]; do
    DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
    SOURCE="\$( readlink "\$SOURCE" )"
    # If \$SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ \$SOURCE != /* ]] && SOURCE="\$DIR/\$SOURCE"
  done
  DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
  echo "\$DIR"
}
DIR=\$(get_script_dir)
CLI_HOME=\$(cd && pwd)
XDG_DATA_HOME=\${XDG_DATA_HOME:="\$CLI_HOME/.local/share"}
if [ "\$1" == "reset" ]; then
  echo "Removing CLI data files and all plugins..."
  remove "\${XDG_DATA_HOME}/heroku"
  exit
fi
HEROKU_CLI_BINPATH=\$DIR/heroku \$DIR/node \$DIR/heroku.js "\$@"
EOF
  chmod +x "$__workspace/usr/lib/heroku/bin/heroku"

  cat << EOF > "$__workspace/usr/lib/heroku/bin/heroku.js"
#!/usr/bin/env node
const {run} = require('@cli-engine/engine')
const config = {
  channel: '${CHANNEL}',
  version: '${VERSION}',
  updateDisabled: 'update the CLI with "sudo apt-get upgrade heroku"'
}
run(process.argv, config)
EOF

  # add debian config
  sed -e "s/Architecture: ARCHITECTURE/Architecture: $DEB_ARCH/" resources/deb/control | \
  sed -e "s/Version: VERSION/Version: $DEB_VERSION/" \
  > "$__workspace/DEBIAN/control"

  # symlink bin
  ln -s ../lib/heroku/bin/heroku "$__workspace/usr/bin/heroku"

  # reset permissions
  chown -R root "$__workspace"
  chgrp -R root "$__workspace"

  # build deb package
  dpkg --build "$__workspace" "$UNVERSIONED_DEB_PATH"
}


for ARCH in "${ARCHS[@]}"; do
  setarch "$ARCH"
  bg build
done
wait_all
