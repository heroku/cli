---
defaults: &defaults
  working_directory: /cli
  docker:
    - image: node:8.4
      environment: &env
        NPM_CONFIG_REGISTRY: https://cli-npm.heroku.com

version: 2
executorType: docker
jobs:
  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: &yarn_restore_cache
          keys:
            - v0-yarn-{{ checksum "yarn.lock" }}
            - v0-yarn
      - run: ./scripts/prep
      - run: {command: "./scripts/test/lint", when: always}
      - run: {command: "npx flow check", when: always}
      - run: {command: "npx jest", when: always}
      - run: {command: "bash <(curl -s https://codecov.io/bash)"}
      - run: {command: "./scripts/test/smoke", when: always}
      - save_cache:
          key: v0-yarn-{{ checksum "yarn.lock" }}
          paths:
            - /usr/local/share/.cache/yarn
  build_os_darwin:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *yarn_restore_cache
      - restore_cache: {keys: [node-v8.4.0-darwin]}
      - run: ./scripts/prep
      - run: ./scripts/build/base
      - run: ./scripts/build/workspace
      - run: ./scripts/build/tarballs
      - persist_to_workspace: &dist
          root: dist
          paths: [ . ]
      - save_cache: &node_cache_save
          key: node-v8.4.0-darwin
          paths: [/cli/tmp/cache/node]
  build_os_linux:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *yarn_restore_cache
      - restore_cache: {keys: [node-v8.4.0-linux]}
      - run: ./scripts/prep
      - run: ./scripts/build/base
      - run: ./scripts/build/workspace
      - run: ./scripts/build/tarballs
      - persist_to_workspace: *dist
      - save_cache:
          <<: *node_cache_save
          key: node-v8.4.0-linux
  build_os_windows:
    <<: *defaults
    docker: &windows_docker
      - image: dickeyxxx/cli-engine-docker-nsis:v3.0.3
        environment: *env
    steps:
      - checkout
      - restore_cache: *yarn_restore_cache
      - restore_cache: {keys: [node-v8.4.0-windows]}
      - run: ./scripts/prep
      - run: ./scripts/build/base
      - run: ./scripts/build/workspace
      - run: ./scripts/build/tarballs
      - persist_to_workspace: *dist
      - save_cache:
          <<: *node_cache_save
          key: node-v8.4.0-windows
  release:
    <<: *defaults
    docker: &release_docker
      - image: dickeyxxx/cli-engine-docker:v3.0.6
        environment: *env
    steps:
      - add_ssh_keys
      - checkout
      - attach_workspace: {at: dist}
      - run: {command: "ls dist", when: always}
      - run: {command: "./scripts/release/_github_setup", when: always}
      - run: {command: "./scripts/release/homebrew", when: always}
      - run: {command: "./scripts/release/upload_dist", when: always}
      - run: {command: "./scripts/release/macos_installer_trigger", when: always}
      - run: {command: "./scripts/release/invalidate_cdn", when: always}
  build_and_release_deb:
    <<: *defaults
    docker: *release_docker
    steps:
      - checkout
      - attach_workspace: {at: dist}
      - run: ./scripts/build/deb
      - run: ls dist/apt
      - run: ./scripts/release/deb
  build_and_release_win_inst:
    <<: *defaults
    docker: *windows_docker
    steps:
      - checkout
      - attach_workspace: {at: dist}
      - run: ./scripts/build/windows
      - run: ls dist
      - run: ./scripts/release/windows
  # dev_center_docs:
  #   docker: *windows_docker
  #   steps:
  #     - type: checkout
  #     - run: ./scripts/release/dev_center_docs
  #     - store_artifacts:
  #         path: /tmp/heroku-cli-commands.md
  #     - run: |
  #         if [ "$CIRCLE_TAG" != "" ]; then
  #           devcenter push /tmp/heroku-cli-commands.md --trace
  #         fi
workflows:
  version: 2
  heroku_cli:
    jobs:
      - test:
          filters: &all_pushes
            tags: &version_tags
              only: /^v.*/
      - build_os_darwin: &release
          filters:
            tags: *version_tags
            branches:
              only:
                - master
                - dev
      - build_os_linux: *release
      - build_os_windows: *release
      - build_and_release_win_inst:
          <<: *release
          requires:
            - test
            - build_os_windows
      - build_and_release_deb:
          <<: *release
          requires:
            - test
            - build_os_linux
      - release:
          <<: *release
          requires:
            - test
            - build_os_darwin
            - build_os_linux
            - build_os_windows
      # skip devcenter for now
      # - dev_center_docs:
      #     requires:
      #       - test
