# ---
# defaults: &defaults
#   working_directory: /cli
#   environment:
#     HEROKU_AUTHOR: Heroku
#   docker:
#     - image: node:14
#       environment: &env
#         LANG: en_US.UTF-8
#         LANGUAGE: en_US.UTF-8
#         LC_TYPE: en_US.UTF-8
#         NODE_OPTIONS: --max_old_space_size=4096 --unhandled-rejections=strict

# version: 2.1
# orbs:
#   win: circleci/windows@2.4.0
# executorType: docker
# jobs:
#   yarn:
#     <<: *defaults
#     steps:
#       - checkout
#       - run: &yarn_setup
#           name: Setup Yarn config
#           command: |
#             mkdir -p /cli/.yarn
#             mkdir -p /cli/.yarn/offline-mirror
#             yarn config set cache-folder /cli/.yarn/cache
#             yarn config set yarn-offline-mirror /cli/.yarn/offline-mirror

#             mkdir -p .cache-keys
#             yarn --version >> .cache-keys/yarn-version
#             sha256sum yarn.lock >> .cache-keys/yarn-lock
#             node --version >> .cache-keys/node-version
#             sha256sum .circleci/config.yml >> .cache-keys/circleci-config

#             # offline mirror cache file
#             cat \
#               .cache-keys/yarn-version \
#               .cache-keys/yarn-lock \
#               .cache-keys/circleci-config \
#               > .cache-keys/yarn-offline-mirror

#             # yarn cache (which is separate from offline mirror) cache file
#             # but dependent on node version.
#             # Represents the final directories in yarn's cache after it un-tars
#             # tarballs from the offline-mirror AND runs install scripts.
#             cat \
#               .cache-keys/yarn-offline-mirror \
#               .cache-keys/node-version
#               > .cache-keys/yarn-cache
#       - restore_cache: &yarn_restore_cache
#           keys:
#             - v5-yarn-offline-mirror-{{checksum ".cache-keys/yarn-offline-mirror"}}-master
#             - v5-yarn-offline-mirror-{{checksum ".cache-keys/yarn-offline-mirror"}}-{{.Branch}}
#             - v5-yarn-cache-{{checksum ".cache-keys/yarn-cache"}}-master
#             - v5-yarn-cache-{{checksum ".cache-keys/yarn-cache"}}-{{.Branch}}
#       - run: &yarn_install
#           name: Installing dependencies
#           command: yarn --frozen-lockfile --prefer-offline
#       - save_cache:
#           key: v5-yarn-offline-mirror-{{checksum ".cache-keys/yarn-offline-mirror"}}-{{.Branch}}
#           paths:
#             - /cli/.yarn/offline-mirror
#       - save_cache:
#           key: v5-yarn-cache-{{checksum ".cache-keys/yarn-cache"}}-{{.Branch}}
#           paths:
#             - /cli/node_modules
#             - /cli/.yarn/cache
#   acceptance-test:
#     <<: *defaults
#     docker:
#       - image: "node:<<parameters.node-version>>"
#         environment:
#           <<: *env
#           RUN_ACCEPTANCE_TESTS: true
#     parameters:
#       node-version:
#         type: "string"
#     steps:
#       - checkout
#       - run: *yarn_setup
#       - restore_cache: *yarn_restore_cache
#       - run: *yarn_install
#       - run:
#           name: heroku whoami
#           command: ./bin/run whoami
#       - run:
#           name: Smoke tests CLI
#           command: ./scripts/run-acceptance
#   windows-test:
#     executor:
#       name: win/default
#       size: xlarge
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - node-modules-v1-win-{{ checksum "yarn.lock" }}
#       - run:
#           name: Install dependencies
#           command: yarn install --frozen-lockfile --prefer-offline
#       - save_cache:
#           paths:
#             - ./node_modules
#           key: node-modules-v1-win-{{ checksum "yarn.lock" }}
#       - run:
#           name: Test and Lint
#           command: yarn test
#   node-test: &test
#     <<: *defaults
#     docker:
#       - image: "node:<<parameters.node-version>>"
#     parameters:
#       node-version:
#         type: "string"
#     resource_class: xlarge
#     steps:
#       - checkout
#       - run: *yarn_setup
#       - restore_cache: &yarn_restore_cache
#           keys:
#             - v5-yarn-{{ checksum ".circleci/config.yml" }}-{{ checksum "yarn.lock" }}
#             - v5-yarn-{{ checksum ".circleci/config.yml" }}
#             - v5-yarn
#       - run: *yarn_install
#       - run:
#           name: Installing dependencies
#           command: yarn --frozen-lockfile
#       - run:
#           name: Running all tests
#           command: yarn test
#   pack-windows:
#     <<: *defaults
#     steps:
#       - checkout
#       - run: *yarn_setup
#       - restore_cache: *yarn_restore_cache
#       - run: *yarn_install
#       - run: |
#           apt-get update
#           apt-get install -y nsis p7zip-full
#       - run: |
#           mkdir -p /build
#           cp yarn.lock packages/cli
#           cd packages/cli
#           yarn --frozen-lockfile
#       - run:
#           name: Building Windows binaries
#           command: ./scripts/pack/win
#       - persist_to_workspace:
#           root: /cli/packages/cli
#           paths:
#             - dist
#   pack-tarballs:
#     <<: *defaults
#     steps:
#       - checkout
#       - run: *yarn_setup
#       - restore_cache: *yarn_restore_cache
#       - run: *yarn_install
#       - run: |
#           apt-get update
#           apt-get install -y p7zip-full
#       - run: |
#           mkdir -p /build
#           cp yarn.lock packages/cli
#           cd packages/cli
#           yarn --frozen-lockfile
#       - run:
#           name: Building Tarballs
#           command: ./scripts/pack/tarballs
#       - persist_to_workspace:
#           root: /cli/packages/cli
#           paths:
#             - dist
#   pack-deb:
#     <<: *defaults
#     steps:
#       - checkout
#       - run: *yarn_setup
#       - restore_cache: *yarn_restore_cache
#       - run: *yarn_install
#       - run: |
#           apt-get update
#           apt-get install -y apt-utils
#       - run: |
#           mkdir -p /build
#           cp yarn.lock packages/cli
#           cd packages/cli
#           yarn --frozen-lockfile
#       - run:
#           name: Building Deb package
#           command: ./scripts/pack/deb
#       - persist_to_workspace:
#           root: /cli/packages/cli
#           paths:
#             - dist
#   sign-deb:
#     <<: *defaults
#     steps:
#       - attach_workspace:
#           at: /build
#       - checkout
#       - run: *yarn_setup
#       - restore_cache: *yarn_restore_cache
#       - run:
#           name: "Signing debian"
#           command: cd /build/dist/deb && /cli/scripts/sign/deb
#       - persist_to_workspace:
#           root: /build
#           paths:
#             - dist
#   store-artifacts:
#     <<: *defaults
#     steps:
#       - attach_workspace:
#           at: /build
#       - checkout
#       - run: *yarn_setup
#       - restore_cache: *yarn_restore_cache
#       - run: *yarn_install
#       - run:
#           name: "Create SHA256 artifacts"
#           command: ./scripts/hash-artifacts
#       - store_artifacts:
#           path: /build/dist
#           destination: /
#   release-deb-and-tarballs:
#     <<: *defaults
#     steps:
#       - checkout
#       - run: *yarn_setup
#       - restore_cache: *yarn_restore_cache
#       - run: *yarn_install
#       - attach_workspace:
#           at: /cli/packages/cli
#       - run: |
#           apt-get update
#           apt-get install -y awscli
#       - run:
#           name: packages/cli yarn install
#           command: |
#             cp yarn.lock packages/cli
#             cd packages/cli
#             yarn --frozen-lockfile --prefer-offline
#       - run:
#           name: Upload production artifacts
#           command: |
#             cd packages/cli
#             ./scripts/release/tarballs
#             ./scripts/release/deb
#       - run:
#           name: Publish Install Scripts
#           command: /cli/scripts/postrelease/install_scripts
#   ## Job not currently being used
#   # trigger_macos:
#   #   <<: *defaults
#   #   steps:
#   #     - add_ssh_keys
#   #     - checkout
#   #     - run: yarn --frozen-lockfile
#   #     - run: ./scripts/release/macos_installer_trigger
#   release-homebrew:
#     <<: *defaults
#     steps:
#       - attach_workspace:
#           at: /build
#       - add_ssh_keys
#       - checkout
#       - run: |
#           cp yarn.lock packages/cli
#           cd packages/cli
#           yarn --frozen-lockfile
#           cp -r /build/dist /cli/packages/cli
#           ./scripts/release/homebrew.js
#   invalidate-cdn-cache:
#     <<: *defaults
#     steps:
#       - checkout
#       - run: |
#           apt-get update
#           apt-get install -y awscli
#           aws configure set preview.cloudfront true
#       - run: ./scripts/postrelease/invalidate_cdn_cache
#   change-management:
#     <<: *defaults
#     steps:
#       - checkout
#       - run: |
#           yarn --frozen-lockfile
#           ./scripts/postrelease/change_management
#   dev-center-docs:
#     docker: &devdocs_docker
#       - image: heroku/devcenter
#         environment:
#           LANG: en_US.UTF-8
#           LANGUAGE: en_US.UTF-8
#           LC_TYPE: en_US.UTF-8
#           LC_ALL: C.UTF-8
#     steps:
#       - checkout
#       - run: cd packages/cli && ./scripts/postrelease/dev_center_docs
#       - store_artifacts:
#           path: /tmp/heroku-cli-commands.md
# workflows:
#   version: 2.1
#   heroku_cli:
#     jobs:
#       - yarn:
#           filters: &always_run_filter
#             tags:
#               only: /^v.*/
#       - windows-test: &windows_test
#           filters: *always_run_filter
#           requires:
#             - yarn
#       - node-test:
#           filters: *always_run_filter
#           matrix:
#             parameters:
#               node-version:
#                 - "16"
#                 - "14"
#           requires:
#             - yarn
#       - acceptance-test:
#           filters: *always_run_filter
#           context:
#             - heroku-cli-acceptance-tests
#           matrix:
#             parameters:
#               node-version:
#                 - "16"
#                 - "14"
#           requires:
#             - yarn
#       - pack-windows:
#           filters: &master_dev_and_version_tags
#             tags: &version_tags
#               only: /^v.*/
#             branches:
#               only:
#                 - master
#           requires: &pack-requires
#             - node-test
#             - windows-test
#             - acceptance-test
#       - pack-tarballs:
#           filters: *master_dev_and_version_tags
#           requires: *pack-requires
#       - pack-deb:
#           filters: *master_dev_and_version_tags
#           requires: *pack-requires
#       - sign-deb:
#           filters: *master_dev_and_version_tags
#           context:
#             - heroku-cli-sign-deb
#           requires:
#             - pack-deb
#       - store-artifacts:
#           filters: *master_dev_and_version_tags
#           requires:
#             - pack-windows
#             - pack-tarballs
#             - sign-deb
#       - release-deb-and-tarballs:
#           filters: *master_dev_and_version_tags
#           context:
#             - heroku-cli-s3
#           requires:
#             - sign-deb
#             - pack-tarballs
#       - invalidate-cdn-cache:
#           filters: *master_dev_and_version_tags
#           context:
#             - heroku-cli-s3
#           requires:
#             - release-deb-and-tarballs
#       - release-homebrew:
#           filters: &tags_only
#             tags: *version_tags
#             branches: &never_run_on_branches
#               ignore: /.*/
#           requires:
#             - release-deb-and-tarballs
#       - change-management: &change_management
#           filters: *tags_only
#           context:
#             - heroku-cli-tps
#           requires:
#             - release-deb-and-tarballs
