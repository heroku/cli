---
defaults: &defaults
  working_directory: /cli
  environment:
    HEROKU_AUTHOR: Heroku
  docker:
    - image: oclif/nsis:12.0.0-16
      environment: &env
        LANG: en_US.UTF-8
        LANGUAGE: en_US.UTF-8
        LC_TYPE: en_US.UTF-8
        NODE_OPTIONS: --max_old_space_size=4096

version: 2.1
orbs:
  win: circleci/windows@2.4.0
executorType: docker
jobs:
  windows-test:
    executor:
      name: win/default
      size: xlarge
    steps:
      - checkout
      - run:
          name: Install latest yarn
          command: |
            (New-Object Net.WebClient).DownloadFile("https://yarnpkg.com/latest.msi", "$env:temp\yarn.msi")
            cmd /c start /wait msiexec.exe /i $env:temp\yarn.msi /quiet /qn /norestart /log install.log
      - run:
          name: Verify yarn installation
          command: |
            if (!(Test-Path -Path "C:\Program Files (x86)\Yarn\bin\yarn" -PathType Leaf)) {
              Write-Host "> Installation failed." -ForegroundColor Red
              Write-Host "" -ForegroundColor Red
              exit 1
            }
      - restore_cache:
          keys:
            - node-modules-v1-win-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - ./node_modules
          key: node-modules-v1-win-{{ checksum "yarn.lock" }}
      - run:
          name: Test and Lint
          command: yarn --cwd packages/addons-v5 test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/apps-v5 test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/apps test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/auth test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/autocomplete test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/buildpacks test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/certs-v5 test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/certs test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/ci-v5 test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/ci test
      # - run:
      #     name: Test and Lint
      #     command: yarn --cwd packages/cli test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/config test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/container-registry-v5 test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/git test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/local test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/oauth-v5 test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/oauth test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/orgs-v5 test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/pg-v5 test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/pipelines test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/ps test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/redis-v5 test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/run-v5 test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/run test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/spaces test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/status test
      - run:
          name: Test and Lint
          command: yarn --cwd packages/webhooks test
  node12-test: &test
    <<: *defaults
    docker:
      - image: node:12
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache: &yarn_restore_cache
          keys:
            - v4-yarn-{{ checksum ".circleci/config.yml" }}-{{ checksum "yarn.lock" }}
            - v4-yarn-{{ checksum ".circleci/config.yml" }}
            - v4-yarn
      - run:
          name: Installing dependencies
          command: yarn --frozen-lockfile
      - run:
          name: heroku whoami
          command: ./bin/run whoami
      - run:
          name: Running all tests
          command: yarn test
      - run:
          name: Uploading code coverage to codecov
          command: ./node_modules/.bin/lerna exec "curl -s https://codecov.io/bash | bash"
  node10-test:
    <<: *test
    docker:
      - image: node:10
    resource_class: xlarge
  node14-test:
    <<: *test
    docker:
      - image: node:14
    resource_class: xlarge
  release_tarballs:
    <<: *defaults
    steps:
      - add_ssh_keys
      - checkout
      - run: |
          cp yarn.lock packages/cli
          cd packages/cli
          yarn --frozen-lockfile
          ./scripts/release/tarballs
      - save_cache:
          key: v4-yarn-{{ checksum ".circleci/config.yml" }}-{{ checksum "yarn.lock" }}
          paths:
            - /cli/node_modules
            - /cli/tmp/cache
            - /usr/local/share/.cache/yarn
      - run: |
          mkdir /persisted
          cp -r /cli/packages/cli/dist /persisted
          cp -r /cli/packages/cli/tmp /persisted
      - persist_to_workspace:
          root: /persisted
          paths:
            - dist
            - tmp
  release_win:
    <<: *defaults
    steps:
      - checkout
      - run: |
          cp yarn.lock packages/cli
          cd packages/cli
          yarn --frozen-lockfile
          ./scripts/release/win
  release_deb:
    <<: *defaults
    steps:
      - checkout
      - run: |
          cp yarn.lock packages/cli
          cd packages/cli
          yarn --frozen-lockfile
          ./scripts/release/deb
  trigger_macos:
    <<: *defaults
    steps:
      - add_ssh_keys
      - checkout
      - run: yarn --frozen-lockfile
      - run: ./scripts/release/macos_installer_trigger
  release_homebrew:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /persisted
      - add_ssh_keys
      - checkout
      - run: |
          cp yarn.lock packages/cli
          cd packages/cli
          yarn --frozen-lockfile
          cp -r /persisted/dist /cli/packages/cli
          cp -r /persisted/tmp /cli/packages/cli
          ./scripts/release/homebrew.js
  invalidate_cdn_cache:
    <<: *defaults
    steps:
      - checkout
      - run: yarn --frozen-lockfile
      - run: ./scripts/postrelease/invalidate_cdn_cache
  install_scripts:
    <<: *defaults
    steps:
      - checkout
      - run: yarn --frozen-lockfile
      - run: ./scripts/postrelease/install_scripts
  change_management:
    <<: *defaults
    steps:
      - checkout
      - run: |
          yarn --frozen-lockfile
          ./scripts/postrelease/change_management
  dev_center_docs:
    docker: &devdocs_docker
      - image: heroku/devcenter
        environment:
          LANG: en_US.UTF-8
          LANGUAGE: en_US.UTF-8
          LC_TYPE: en_US.UTF-8
          LC_ALL: C.UTF-8
    steps:
      - checkout
      - run: cd packages/cli && ./scripts/postrelease/dev_center_docs
      - store_artifacts:
          path: /tmp/heroku-cli-commands.md
  release_snap:
    docker:
      - image: snapcore/snapcraft:stable
        environment:
          LC_ALL: C.UTF-8
    steps:
      # the snapcraft image does not include git
      - run: apt-get -qq update; apt-get -y install git
      - checkout
      - run: ./scripts/release/snap
workflows:
  version: 2.1
  heroku_cli_tests:
    jobs:
      - windows-test: &windows_test
          filters:
            tags: &version_tags
              only: /^v.*/
            branches:
              ignore:
                - master
      - node14-test: *windows_test
      - node12-test: *windows_test
      - node10-test: *windows_test
  heroku_cli_release:
    jobs:
      - node14-test: &node14_test
          filters:
            branches:
              only:
                - master
            tags: &version_tags
              only: /^v.*/
      - node12-test: *node14_test
      - node10-test: *node14_test
      - windows-test: *node14_test
      - release_tarballs: &release_tarballs
          requires:
            - node12-test
            - node10-test
            - windows-test
          filters: &master_dev_and_version_tags
            tags:
              <<: *version_tags
            branches:
              only:
                - master
                - dev
      - release_deb: *release_tarballs
      - release_win: *release_tarballs
      - release_homebrew:
          requires:
            - release_tarballs
          filters: &only_version_tags
            branches:
              ignore: /.*/
            tags:
              <<: *version_tags
#       - trigger_macos: &trigger_macos
#           requires:
#             - node12-test
#             - node10-test
#             - windows-test
#           filters:
#             <<: *only_version_tags
#      - release_snap:
#          requires:
#            - node12-test
#            - node10-test
#            - windows-test
#          filters:
#            <<: *only_version_tags
      - invalidate_cdn_cache:
          requires:
            - install_scripts
          filters:
            <<: *master_dev_and_version_tags
      - install_scripts: &install_scripts
          requires:
            - release_tarballs
            - release_deb
            - release_win
          filters:
            <<: *master_dev_and_version_tags
      - change_management: &change_management
          requires:
            - release_tarballs
            - release_deb
            - release_win
          filters:
            <<: *only_version_tags
      - dev_center_docs: *change_management
